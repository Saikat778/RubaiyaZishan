import React, { useEffect, useState } from "react";
import { getDocs, addDoc, collection, query, where, deleteDoc } from "firebase/firestore";
import { db, auth } from "../../config/firebase";
import { useAuthState } from "react-firebase-hooks/auth";

export interface PostData {
  id: string;
  title: string;
  description: string;
  category: string;
}

interface CategoryPostsProps {
  category: string;
}

export const CategoryPosts = (props: CategoryPostsProps) => {
  const { category } = props;
  const [user] = useAuthState(auth);
  const [posts, setPosts] = useState<PostData[]>([]);
  const [likesCount, setLikesCount] = useState<{ [key: string]: number }>({});
  const [userLikes, setUserLikes] = useState<{ [key: string]: boolean }>({});

  const likesRef = collection(db, "like");

  const addLike = async (postId: string) => {
    if (!user?.uid) return; // Check if user is authenticated
    await addDoc(likesRef, { userId: user.uid, postId });
    setUserLikes((prev) => ({ ...prev, [postId]: true }));
    setLikesCount((prev) => ({ ...prev, [postId]: (prev[postId] || 0) + 1 }));
  };

  const removeLike = async (postId: string) => {
    if (!user?.uid) return; // Check if user is authenticated
    const q = query(likesRef, where("userId", "==", user.uid), where("postId", "==", postId));
    const querySnapshot = await getDocs(q);
    querySnapshot.forEach(async (doc) => {
      await deleteDoc(doc.ref);
    });
    setUserLikes((prev) => ({ ...prev, [postId]: false }));
    setLikesCount((prev) => ({ ...prev, [postId]: prev[postId] > 0 ? prev[postId] - 1 : 0 }));
  };

  const checkUserLikes = async (postId: string) => {
    if (!user?.uid) return; // Check if user is authenticated
    const q = query(likesRef, where("userId", "==", user.uid), where("postId", "==", postId));
    const querySnapshot = await getDocs(q);
    setUserLikes((prev) => ({ ...prev, [postId]: !querySnapshot.empty }));
  };

  useEffect(() => {
    const fetchPosts = async () => {
      const postsRef = collection(db, "posts");
      const q = query(postsRef, where("category", "==", category));
      const querySnapshot = await getDocs(q);
      const postsData = querySnapshot.docs.map((doc) => ({
        ...doc.data(),
        id: doc.id,
      })) as PostData[];

      setPosts(postsData);

      // Fetch likes count for each post
      postsData.forEach(async (post) => {
        const likesSnapshot = await getDocs(query(likesRef, where("postId", "==", post.id)));
        setLikesCount((prev) => ({ ...prev, [post.id]: likesSnapshot.size }));
        checkUserLikes(post.id);
      });
    };

    fetchPosts();
  }, [category, user]);

  return (
    <div>
      <h2>{category} Posts</h2>
      {posts.length > 0 ? (
        posts.map((post) => (
          <div key={post.id}>
            <h3>{post.title}</h3>
            <p>{post.description}</p>
            <button onClick={() => userLikes[post.id] ? removeLike(post.id) : addLike(post.id)}>
              {userLikes[post.id] ? '👎' : '👍'}
            </button>
            <p>Likes: {likesCount[post.id] || 0}</p>
          </div>
        ))
      ) : (
        <p>No posts found in this category.</p>
      )}
    </div>
  );
};
