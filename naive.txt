import React, { useEffect, useState } from "react";
import { getDocs, addDoc, deleteDoc, collection, query, where, DocumentReference } from "firebase/firestore";
import { db, auth } from "../../config/firebase";
import { useAuthState } from "react-firebase-hooks/auth";

export interface PostData {
  id: string;
  title: string;
  description: string;
  category: string;
}

interface CategoryPostsProps {
  category: string;
}

interface LikeData {
  userId: string;
  postId: string;
}

export const CategoryPosts = (props: CategoryPostsProps) => {
  const {category} = props;
  const [user] = useAuthState(auth);
  const likesRef = collection(db, "like");
  const [userLikes, setUserLikes] = useState<Set<string>>(new Set());
  const [posts, setPosts] = useState<PostData[]>([]);


  useEffect(() => {
    const fetchPosts = async () => {
      const postsRef = collection(db, "posts");
      const q = query(postsRef, where("category", "==", category));
      const querySnapshot = await getDocs(q);
      const postsData = querySnapshot.docs.map((doc) => ({
        ...doc.data(),
        id: doc.id,
      })) as PostData[];
      setPosts(postsData);
    };

    fetchPosts();
  }, [category]);

  useEffect(() => {
    const fetchUserLikes = async () => {
      if (user) {
        const userLikesQuery = query(likesRef, where("userId", "==", user.uid));
        const userLikesSnapshot = await getDocs(userLikesQuery);
        const likedPostIds = new Set(userLikesSnapshot.docs.map((doc) => doc.data().postId));
        setUserLikes(likedPostIds);
      }
    };

    fetchUserLikes();
  }, [user]);

  const toggleLike = async (postId: string) => {
    if (user) {
      if (userLikes.has(postId)) {
        // User already liked the post, so we unlike it
        const likesQuery = query(likesRef, where("userId", "==", user.uid), where("postId", "==", postId));
        const likesSnapshot = await getDocs(likesQuery);
        likesSnapshot.forEach(async (doc) => {
          const docRef: DocumentReference = doc.ref as DocumentReference; // Ensure it's a DocumentReference
          await deleteDoc(docRef); // Delete the like document
        });
        userLikes.delete(postId); // Remove from user's liked posts
      } else {
        // User likes the post
        await addDoc(likesRef, { userId: user.uid, postId: postId });
        userLikes.add(postId); // Add to user's liked posts
      }
      setUserLikes(new Set(userLikes)); // Trigger a re-render
    }
  };

  return (
    <div>
      <h2>{category} Posts</h2>
      {posts.length > 0 ? (
        posts.map((post) => (
          <div key={post.id}>
            <h3>{post.title}</h3>
            <p>{post.description}</p>
            <button onClick={() => toggleLike(post.id)}>
              {userLikes.has(post.id) ? '👎' : '👍'}
            </button>
            <p>Likes: {post.likesCount || 0}</p>
          </div>
        ))
      ) : null}

      
    </div>
  );
};